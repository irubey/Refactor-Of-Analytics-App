// schema docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid())
  age         Int?
  firstName   String?
  lastName    String?
  username    String  @unique
  password    String
  email       String  @unique
  address     String?
  phoneNumber String?
  bio         String?
  profilePic  String?

  isAdmin           Boolean   @default(false)
  isActive          Boolean   @default(true)
  dateCreated       DateTime  @default(now())
  lastLoggedIn      DateTime  @default(now())
  lastProfileUpdate DateTime?
  deletedAt         DateTime?

  coached   UserRelationships[] @relation("coach")
  athletes  UserRelationships[] @relation("athlete")
  following UserRelationships[] @relation("following")

  ticks       Tick[]           @relation()
  sessions    Session[]        @relation()
  preferences userPreferences?
  role        Role             @default(NEW_USER)
  routesAdded Route[]

  // @@unique([age, firstName, lastName, email])
  // @@index([email])
}

model userPreferences {
  id              String  @id @default(uuid())
  emailUpdates    Boolean @default(true)
  privacySettings String  @default("public")
  darkMode        Boolean @default(true)
  language        String  @default("en")
  timeZone        String  @default("UTC")

  tags   Tags[]
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model UserRelationships {
  id          String @id @default(uuid())
  coachId     String
  athleteId   String
  followingId String
  coach       User   @relation("coach", fields: [coachId], references: [id])
  athlete     User   @relation("athlete", fields: [athleteId], references: [id])
  following   User   @relation("following", fields: [followingId], references: [id])
}

model Tick {
  id          String       @id @default(uuid())
  name        String
  length      Float?
  attempts    Int          @default(0)
  sends       Int          @default(1)
  grade       String?
  discipline  Discipline?
  ascentStyle AscentStyle?
  leadStyle   LeadStyle?
  danger      Danger?
  quality     Float?
  notes       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  multipitch  Boolean      @default(false)

  author     User     @relation(fields: [authorId], references: [id])
  authorId   String
  tags       Tags[]
  route      Route    @relation(fields: [routeId], references: [id])
  routeId    String
  location   Location @relation(fields: [locationId], references: [id])
  locationId String
  session    Session  @relation(fields: [sessionId], references: [id])
  sessionId  String
}

model Session {
  id     String   @id @default(uuid())
  date   DateTime @default(now())
  energy Energy?
  notes  String?

  ticks      Tick[]
  tags       Tags[]
  author     User      @relation(fields: [authorId], references: [id])
  authorId   String
  Location   Location? @relation(fields: [locationId], references: [id])
  locationId String?
}

model Route {
  id         String     @id @default(uuid())
  name       String
  ticks      Tick[]
  location   Location   @relation(fields: [locationId], references: [id])
  locationId String
  multipitch Boolean    @default(false)
  grade      String
  discipline Discipline
  length     Float
  quality    Float
  danger     Danger
  tags       Tags[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  author     User       @relation(fields: [authorId], references: [id])
  authorId   String
}

model Location {
  id           String    @id @default(uuid())
  locationName String
  description  String?
  gps          String    @unique
  indoors      Boolean   @default(false)
  facilities   String?
  approach     String?
  altitude     Float?
  images       String[]
  inSeason     Season?
  areaGroup    AreaGroup @relation(fields: [areaGroupId], references: [id])
  areaGroupId  String
  routes       Route[]
  sessions     Session[]
  tags         Tags[]
  ticks        Tick[]
}

model AreaGroup {
  id          String     @id @default(uuid())
  name        String     @unique
  description String?
  city        String?
  state       String?
  country     String?
  tags        Tags[]
  location    Location[]
}

model Tags {
  id          String            @id @default(uuid())
  name        String            @unique
  ticks       Tick[]
  routes      Route[]
  location    Location[]
  areaGroup   AreaGroup[]
  preferences userPreferences[]
  sessions    Session[]
}

model GradeConversionCode {
  id     String   @id @default(uuid())
  code   Int
  grades String[]
}

enum Role {
  NEW_USER
  ATHELETE
  COACH
  ADMIN
}

enum Discipline {
  SPORT
  TRAD
  BOULDER
  MIXED
  ICE
  ALPINE
  AID
  TOP_ROPE
  SOLO
  SPEED
  COMP_BOULDER
  COMP_SPORT
}

enum Energy {
  TIRED
  WEAK
  TWEAKY
  AVERAGE
  STRONG
}

enum AscentStyle {
  LEAD
  TOP_ROPE
  SOLO
  BOULDER
}

enum LeadStyle {
  ONSIGHT
  FLASH
  REDPOINT
  PINKPOINT
  WORKED
  REDPOINT_ATTEMPT
  REPEAT
}

enum Danger {
  G
  PG
  PG13
  R
  X
}

enum Season {
  WINTER
  SPRING
  SUMMER
  FALL
}
